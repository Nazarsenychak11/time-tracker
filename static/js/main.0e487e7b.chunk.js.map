{"version":3,"sources":["Timer.js","Pomodoro.js","Activity.js","ActivityForm.js","ProgressTracker.js","App.js","serviceWorker.js","index.js"],"names":["Timer","minuteParse","Math","trunc","this","props","timer","minutes","secondParse","seconds","className","Component","Pomodoro","state","onBreak","isActive","timerId","timerLength","resetTimer","bind","startTimer","stopTimer","countDown","clearInterval","setState","toggleAlarm","setInterval","breakLength","counter","play","alarm","document","getElementById","console","log","pause","noticeMsg","count","id","autoPlay","src","type","onClick","Activity","currentId","handleSubmit","incrementCount","removeActivity","parseInt","timerMin","timerSec","breakMin","breakSec","title","desc","ActivityForm","handleChange","handleFocus","handleBlur","evt","preventDefault","addActivity","target","name","value","onSubmit","htmlFor","required","autoComplete","onChange","rows","placeholder","max","onFocus","onMouseOver","onBlur","onMouseLeave","ProgressTracker","activity","updateLocalStorage","JSON","parse","window","localStorage","getItem","setItem","stringify","item","newItem","uuid","itemId","updateArr","activeItem","forEach","cur","idx","splice","activities","map","key","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e487e7b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Timer.css';\r\n\r\nexport default class Timer extends Component {\r\n  render() {\r\n    let minuteParse = Math.trunc(this.props.timer / 60);\r\n    let minutes = minuteParse < 10 ? `0${minuteParse}` : minuteParse;\r\n    let secondParse = this.props.timer % 60;\r\n    let seconds = secondParse < 10 ? `0${secondParse}` : secondParse;\r\n\r\n    return (\r\n      <div className=\"timer\">\r\n        {minutes}:{seconds}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Timer from './Timer';\r\nimport './Pomodoro.css';\r\n\r\nexport default class Pomodoro extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      onBreak: false,\r\n      isActive: false,\r\n      timerId: 0,\r\n      timer: this.props.timerLength || 1500,\r\n    }\r\n\r\n    this.resetTimer = this.resetTimer.bind(this);\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.stopTimer = this.stopTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n  }\r\n\r\n  // Function is executed when the component is unmounted\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.timerId);\r\n  }\r\n\r\n  // onClick Function that resets the timer value\r\n  resetTimer() {\r\n    if(this.state.timerId !== 0) {\r\n      clearInterval(this.state.timerId);\r\n    }\r\n\r\n    this.setState({\r\n      timer: this.props.timerLength || 1500,\r\n      isActive: false,\r\n      onBreak: false\r\n    });\r\n  }\r\n\r\n  // onClick Function that starts the timer countdown\r\n  startTimer() {\r\n    if (this.state.timer > 0 && !this.state.isActive) { // if timer is > 0, also timer not active\r\n      this.toggleAlarm(false);  // turn off the alarm if it is active\r\n      this.setState({\r\n        timerId: setInterval(this.countDown, 1000),\r\n        isActive: true\r\n      });\r\n    }\r\n  }\r\n\r\n  // onClick Function that stops the timer countdown\r\n  stopTimer() {\r\n    this.toggleAlarm(false);              // turns off the alarm if its active\r\n\r\n    clearInterval(this.state.timerId);    // clear the Interval timer calls to countdown()\r\n    this.setState({\r\n      isActive: false                     // set isActive to false\r\n    });\r\n  }\r\n\r\n  // Function that handles the logic of the timer countdown\r\n  countDown() {\r\n    if (this.state.timer > 0) {           // check that there is still time on the timer\r\n      this.setState({\r\n        timer: this.state.timer - 1       // decrement the value of timer\r\n      });\r\n    } else {                              // execute if the timer has completed\r\n      clearInterval(this.state.timerId);  // clear the interval calls to countdown()\r\n      this.setState({\r\n        isActive: false                   // set to inactive\r\n      })\r\n    }\r\n  }\r\n\r\n  // React Function that handles whenever the Component is updated\r\n  componentDidUpdate() {\r\n    if (this.state.timer === 0 && !this.state.isActive) {     // check that timer has ended\r\n      this.toggleAlarm(true);\r\n\r\n      if (this.state.onBreak === false) {                     // if onBreak === false (end of normal timer)\r\n        this.setState({\r\n          onBreak: true,                                      // toggle onBreak value\r\n          timer: this.props.breakLength || 300                // set Timer\r\n        });\r\n      } else {                                                // if onBreak === true (end of break timer)       \r\n\r\n        this.setState({                                       // condition continues to be \r\n          isActive: true\r\n        });\r\n        this.props.counter();                                 // call parent counter function        \r\n      }\r\n    }  \r\n  }\r\n\r\n  // toggles the Alarm depending on several factors in state\r\n  toggleAlarm(play) {\r\n    const alarm = document.getElementById('alarm');\r\n    console.log(play);\r\n    console.log(alarm);\r\n    \r\n    if (alarm)\r\n      play ? alarm.play() : alarm.pause();                                           // sound the alarm\r\n  }\r\n\r\n  render() {\r\n    let noticeMsg = \"\";\r\n\r\n    if (this.state.onBreak) {\r\n      if (this.state.timer > 0) {\r\n        noticeMsg = \"Break Time\";\r\n      } else {\r\n        noticeMsg = \"The Timer has Ended\";\r\n      }\r\n    } else {\r\n      noticeMsg = `Counter: ${this.props.count || 0}`;\r\n    }\r\n\r\n    let alarm = this.state.timer === 0 || this.state.onBreak ?\r\n      <audio id=\"alarm\" autoPlay>\r\n        <source src=\"analog-watch-alarm.mp3\" type=\"audio/mpeg\"></source>\r\n        <source src=\"analog-watch-alarm.wav\" type=\"audio/wav\"></source>\r\n        Your browser does not support the audio element\r\n      </audio> : \"\";\r\n\r\n    return (\r\n      <div className=\"pomodoro\">\r\n        <section className=\"section-timer\" >\r\n          <Timer timer={ this.state.timer }/>\r\n        </section>\r\n\r\n        <section className=\"section-notice\">\r\n          <h3 className=\"section-notice-msg\">{noticeMsg}</h3>\r\n          {alarm} \r\n        </section>\r\n        \r\n        <section className=\"section-controls\">\r\n          <button className=\"controls-button\" onClick={this.startTimer}>Start</button>\r\n          <button className=\"controls-button\" onClick={this.stopTimer}>Stop</button>\r\n          <button className=\"controls-button\" onClick={this.resetTimer}>Restart</button>\r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Activity.css';\r\nimport Pomodoro from './Pomodoro';\r\n\r\n\r\nexport default class Activity extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      currentId: this.props.id\r\n    }\r\n  \r\n    this.counter = this.counter.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  counter() {\r\n    this.props.incrementCount(this.state.currentId);\r\n  }\r\n\r\n  handleSubmit() {\r\n    this.props.removeActivity(this.state.currentId);\r\n  }\r\n\r\n  render() {\r\n    \r\n    let timerLength = parseInt(this.props.timerMin * 60) + parseInt(this.props.timerSec);\r\n    let breakLength = parseInt(this.props.breakMin * 60) + parseInt(this.props.breakSec);\r\n\r\n    return (\r\n      <div className=\"activity-card\">\r\n        <span className=\"activity-card-header\">\r\n          <h2 className=\"activity-card__title\">{this.props.title}</h2>\r\n          <button onClick={this.handleSubmit} className=\"activity-card-header__button\">X</button>\r\n        </span >\r\n        \r\n        {this.props.desc ? \r\n          <p className=\"activity-card__desc\">{this.props.desc}</p> : \"\"}\r\n        \r\n        <Pomodoro\r\n          counter={this.counter} \r\n          count={this.props.count} \r\n          timerLength={timerLength} \r\n          breakLength={breakLength}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './ActivityForm.css';\r\n\r\nexport default class ActivityForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      desc: \"\",\r\n      count: 0,\r\n      timerMin: 0,\r\n      timerSec: 0,\r\n      breakMin: 0,\r\n      breakSec: 0\r\n    }\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleFocus = this.handleFocus.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n  }\r\n  \r\n  // Function that handles when the activity form is submitted passing state back to parent function\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    this.props.addActivity(this.state);\r\n    this.setState({ // Reset user input variables\r\n      title: \"\",\r\n      desc: \"\",\r\n      timerMin: 0,\r\n      timerSec: 0,\r\n      breakMin: 0,\r\n      breakSec: 0\r\n    })\r\n  }\r\n\r\n  // Function that handles changes to the input forms\r\n  handleChange(evt) {\r\n    this.setState({[evt.target.name] : evt.target.value});\r\n  }\r\n\r\n  // Function that handles when the submit button has focus in order for form validation\r\n  handleFocus() {\r\n    console.log('focused');\r\n  }\r\n\r\n  handleBlur() {\r\n    console.log('blurred');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"activity-card\">\r\n        <h3 className=\"activity-card__title\">Add an Activity</h3>\r\n        <p className=\"activity-card__desc\">\r\n          Enter the Activity that you'd like to track, a brief description, the length of time \r\n          for each cycle and the break time.\r\n        </p>\r\n        \r\n        <form className=\"activity-form\" onSubmit={this.handleSubmit}>\r\n          <label className=\"activity-form__label\" htmlFor=\"title\">Title</label>\r\n          <input \r\n          className=\"activity-form__input\" \r\n          type=\"text\" id=\"title\" \r\n          name=\"title\" \r\n          required\r\n          autoComplete=\"off\"\r\n            value={this.state.title} \r\n            onChange={this.handleChange}/>\r\n\r\n          <label className=\"activity-form__label\" htmlFor=\"desc\">Description</label>\r\n          <textarea className=\"activity-form__input\" id=\"desc\" name=\"desc\" rows=\"4\"\r\n            value={this.state.desc}\r\n            onChange={this.handleChange}>\r\n          </textarea>\r\n\r\n          <div className=\"activity-form__row-grouping\">\r\n            <label className=\"activity-form__label\" htmlFor=\"timerMin\">Min/Sec for Timer</label>\r\n              <input className=\"activity-form__input--short\" type=\"number\" id=\"timerMin\" name=\"timerMin\"\r\n                placeholder=\"25\"\r\n                value={this.state.timerMin}\r\n                onChange={this.handleChange}/>\r\n              \r\n              <input className=\"activity-form__input--short\" type=\"number\" id=\"timerSec\" name=\"timerSec\" max=\"60\"\r\n                placeholder=\"00\" \r\n                value={this.state.timerSec}\r\n                onChange={this.handleChange}/>          \r\n          </div>\r\n\r\n          <div className=\"activity-form__row-grouping\">\r\n            <label className=\"activity-form__label\" htmlFor=\"breakMin\">Min/Sec for Break</label>\r\n              <input className=\"activity-form__input--short\" type=\"number\" id=\"breakMin\" name=\"breakMin\"\r\n                placeholder=\"5\"\r\n                value={this.state.breakMin}\r\n                onChange={this.handleChange}/>\r\n\r\n              <input className=\"activity-form__input--short\" type=\"number\" id=\"breakSec\" name=\"breakSec\"\r\n                placeholder=\"00\" max=\"60\" \r\n                value={this.state.breakSec}\r\n                onChange={this.handleChange}/>\r\n\r\n          </div>\r\n\r\n          <button className=\"activity-form__button\"\r\n            onFocus={this.handleFocus}\r\n            onMouseOver={this.handleFocus}\r\n            onBlur={this.handleBlur}\r\n            onMouseLeave={this.handleBlur}>\r\n            Create\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './ProgressTracker.css';\r\nimport Activity from './Activity';\r\nimport ActivityForm from './ActivityForm';\r\nimport uuid from 'uuid/v4';\r\n\r\nexport default class ProgressTracker extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { activity: []}\r\n\r\n    this.addActivity = this.addActivity.bind(this);\r\n    this.incrementCount = this.incrementCount.bind(this);\r\n    this.updateLocalStorage = this.updateLocalStorage.bind(this);\r\n    this.removeActivity = this.removeActivity.bind(this);\r\n  }\r\n\r\n  // Component Mounting\r\n  componentDidMount() {\r\n    this.setState({\r\n      activity: JSON.parse(window.localStorage.getItem(\"activity\")) || []\r\n    });\r\n  }\r\n\r\n  // Component updating - Whenever changes to the compoent \r\n  componentDidUpdate() {\r\n    this.updateLocalStorage();\r\n  }\r\n\r\n  // Function that stores locally any changes to activity\r\n  updateLocalStorage() {\r\n    window.localStorage.setItem(\"activity\", JSON.stringify(this.state.activity));    \r\n  }\r\n\r\n  // Function that adds new array entry onto state array of activity\r\n  // called from child component: ActivityForm\r\n  addActivity(item) {\r\n    let newItem = {...item, id: uuid()};\r\n\r\n    this.setState(state => ({\r\n      activity: [...state.activity, newItem]\r\n    }));\r\n  }\r\n\r\n  // Function that removes an array entry from state - activity\r\n  // called from child component: Activity\r\n  removeActivity(itemId) {\r\n    let updateArr = this.state.activity;\r\n    let activeItem = 0;\r\n\r\n    updateArr.forEach((cur, idx) => {\r\n      if(cur.id === itemId) {\r\n        activeItem = idx;\r\n      }\r\n    });\r\n\r\n    updateArr.splice(activeItem, 1);\r\n\r\n    this.setState({\r\n      activity: updateArr\r\n    });\r\n\r\n    this.updateLocalStorage();\r\n  }\r\n\r\n  // Function counter : increments state count by 1\r\n  // called from child component: Activity\r\n  incrementCount(itemId) {\r\n    let updateArr = this.state.activity;\r\n    let activeItem = 0;\r\n\r\n    updateArr.forEach((cur, idx) => {\r\n      if(cur.id === itemId) {\r\n        activeItem = idx;\r\n      }\r\n    });\r\n    \r\n    updateArr[activeItem].count = updateArr[activeItem].count+1;\r\n    \r\n    this.setState({\r\n      activity: updateArr\r\n    });\r\n\r\n    this.updateLocalStorage();\r\n  }\r\n\r\n  render() {\r\n\r\n    let activities = this.state.activity.map(activity => {\r\n      return(\r\n      <Activity\r\n        incrementCount={this.incrementCount}\r\n        removeActivity={this.removeActivity}\r\n        title={activity.title}\r\n        desc={activity.desc}\r\n        count={activity.count}\r\n        timerMin={activity.timerMin}\r\n        timerSec={activity.timerSec}\r\n        breakMin={activity.breakMin}\r\n        breakSec={activity.breakSec}\r\n        id={activity.id}\r\n        key={activity.id}\r\n      />\r\n    )});\r\n\r\n    return (\r\n      <div className=\"progress-tracker\">\r\n        <section className=\"section--row\">\r\n          {activities}\r\n          <ActivityForm addActivity={this.addActivity} />\r\n        </section>        \r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport ProgressTracker from './ProgressTracker';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <ProgressTracker />\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}